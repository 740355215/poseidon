/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Automatically generated by MockGen. DO NOT EDIT!
// Source: firmament_scheduler.pb.go

package firmament

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of FirmamentSchedulerClient interface
type MockFirmamentSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *_MockFirmamentSchedulerClientRecorder
}

// Recorder for MockFirmamentSchedulerClient (not exported)
type _MockFirmamentSchedulerClientRecorder struct {
	mock *MockFirmamentSchedulerClient
}

func NewMockFirmamentSchedulerClient(ctrl *gomock.Controller) *MockFirmamentSchedulerClient {
	mock := &MockFirmamentSchedulerClient{ctrl: ctrl}
	mock.recorder = &_MockFirmamentSchedulerClientRecorder{mock}
	return mock
}

func (_m *MockFirmamentSchedulerClient) EXPECT() *_MockFirmamentSchedulerClientRecorder {
	return _m.recorder
}

func (_m *MockFirmamentSchedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*SchedulingDeltas, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Schedule", _s...)
	ret0, _ := ret[0].(*SchedulingDeltas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) Schedule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Schedule", _s...)
}

func (_m *MockFirmamentSchedulerClient) TaskCompleted(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskCompletedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TaskCompleted", _s...)
	ret0, _ := ret[0].(*TaskCompletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) TaskCompleted(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskCompleted", _s...)
}

func (_m *MockFirmamentSchedulerClient) TaskFailed(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskFailedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TaskFailed", _s...)
	ret0, _ := ret[0].(*TaskFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) TaskFailed(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskFailed", _s...)
}

func (_m *MockFirmamentSchedulerClient) TaskRemoved(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskRemovedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TaskRemoved", _s...)
	ret0, _ := ret[0].(*TaskRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) TaskRemoved(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskRemoved", _s...)
}

func (_m *MockFirmamentSchedulerClient) TaskSubmitted(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskSubmittedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TaskSubmitted", _s...)
	ret0, _ := ret[0].(*TaskSubmittedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) TaskSubmitted(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskSubmitted", _s...)
}

func (_m *MockFirmamentSchedulerClient) TaskUpdated(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskUpdatedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TaskUpdated", _s...)
	ret0, _ := ret[0].(*TaskUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) TaskUpdated(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskUpdated", _s...)
}

func (_m *MockFirmamentSchedulerClient) NodeAdded(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeAddedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeAdded", _s...)
	ret0, _ := ret[0].(*NodeAddedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) NodeAdded(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeAdded", _s...)
}

func (_m *MockFirmamentSchedulerClient) NodeFailed(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeFailedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeFailed", _s...)
	ret0, _ := ret[0].(*NodeFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) NodeFailed(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeFailed", _s...)
}

func (_m *MockFirmamentSchedulerClient) NodeRemoved(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeRemovedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeRemoved", _s...)
	ret0, _ := ret[0].(*NodeRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) NodeRemoved(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeRemoved", _s...)
}

func (_m *MockFirmamentSchedulerClient) NodeUpdated(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeUpdatedResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NodeUpdated", _s...)
	ret0, _ := ret[0].(*NodeUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) NodeUpdated(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeUpdated", _s...)
}

func (_m *MockFirmamentSchedulerClient) AddTaskStats(ctx context.Context, in *TaskStats, opts ...grpc.CallOption) (*TaskStatsResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddTaskStats", _s...)
	ret0, _ := ret[0].(*TaskStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) AddTaskStats(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTaskStats", _s...)
}

func (_m *MockFirmamentSchedulerClient) AddNodeStats(ctx context.Context, in *ResourceStats, opts ...grpc.CallOption) (*ResourceStatsResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddNodeStats", _s...)
	ret0, _ := ret[0].(*ResourceStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerClientRecorder) AddNodeStats(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNodeStats", _s...)
}

// Mock of FirmamentSchedulerServer interface
type MockFirmamentSchedulerServer struct {
	ctrl     *gomock.Controller
	recorder *_MockFirmamentSchedulerServerRecorder
}

// Recorder for MockFirmamentSchedulerServer (not exported)
type _MockFirmamentSchedulerServerRecorder struct {
	mock *MockFirmamentSchedulerServer
}

func NewMockFirmamentSchedulerServer(ctrl *gomock.Controller) *MockFirmamentSchedulerServer {
	mock := &MockFirmamentSchedulerServer{ctrl: ctrl}
	mock.recorder = &_MockFirmamentSchedulerServerRecorder{mock}
	return mock
}

func (_m *MockFirmamentSchedulerServer) EXPECT() *_MockFirmamentSchedulerServerRecorder {
	return _m.recorder
}

func (_m *MockFirmamentSchedulerServer) Schedule(_param0 context.Context, _param1 *ScheduleRequest) (*SchedulingDeltas, error) {
	ret := _m.ctrl.Call(_m, "Schedule", _param0, _param1)
	ret0, _ := ret[0].(*SchedulingDeltas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) Schedule(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Schedule", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) TaskCompleted(_param0 context.Context, _param1 *TaskUID) (*TaskCompletedResponse, error) {
	ret := _m.ctrl.Call(_m, "TaskCompleted", _param0, _param1)
	ret0, _ := ret[0].(*TaskCompletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) TaskCompleted(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskCompleted", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) TaskFailed(_param0 context.Context, _param1 *TaskUID) (*TaskFailedResponse, error) {
	ret := _m.ctrl.Call(_m, "TaskFailed", _param0, _param1)
	ret0, _ := ret[0].(*TaskFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) TaskFailed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskFailed", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) TaskRemoved(_param0 context.Context, _param1 *TaskUID) (*TaskRemovedResponse, error) {
	ret := _m.ctrl.Call(_m, "TaskRemoved", _param0, _param1)
	ret0, _ := ret[0].(*TaskRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) TaskRemoved(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskRemoved", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) TaskSubmitted(_param0 context.Context, _param1 *TaskDescription) (*TaskSubmittedResponse, error) {
	ret := _m.ctrl.Call(_m, "TaskSubmitted", _param0, _param1)
	ret0, _ := ret[0].(*TaskSubmittedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) TaskSubmitted(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskSubmitted", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) TaskUpdated(_param0 context.Context, _param1 *TaskDescription) (*TaskUpdatedResponse, error) {
	ret := _m.ctrl.Call(_m, "TaskUpdated", _param0, _param1)
	ret0, _ := ret[0].(*TaskUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) TaskUpdated(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskUpdated", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) NodeAdded(_param0 context.Context, _param1 *ResourceTopologyNodeDescriptor) (*NodeAddedResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeAdded", _param0, _param1)
	ret0, _ := ret[0].(*NodeAddedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) NodeAdded(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeAdded", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) NodeFailed(_param0 context.Context, _param1 *ResourceUID) (*NodeFailedResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeFailed", _param0, _param1)
	ret0, _ := ret[0].(*NodeFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) NodeFailed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeFailed", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) NodeRemoved(_param0 context.Context, _param1 *ResourceUID) (*NodeRemovedResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeRemoved", _param0, _param1)
	ret0, _ := ret[0].(*NodeRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) NodeRemoved(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeRemoved", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) NodeUpdated(_param0 context.Context, _param1 *ResourceTopologyNodeDescriptor) (*NodeUpdatedResponse, error) {
	ret := _m.ctrl.Call(_m, "NodeUpdated", _param0, _param1)
	ret0, _ := ret[0].(*NodeUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) NodeUpdated(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NodeUpdated", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) AddTaskStats(_param0 context.Context, _param1 *TaskStats) (*TaskStatsResponse, error) {
	ret := _m.ctrl.Call(_m, "AddTaskStats", _param0, _param1)
	ret0, _ := ret[0].(*TaskStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) AddTaskStats(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTaskStats", arg0, arg1)
}

func (_m *MockFirmamentSchedulerServer) AddNodeStats(_param0 context.Context, _param1 *ResourceStats) (*ResourceStatsResponse, error) {
	ret := _m.ctrl.Call(_m, "AddNodeStats", _param0, _param1)
	ret0, _ := ret[0].(*ResourceStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFirmamentSchedulerServerRecorder) AddNodeStats(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNodeStats", arg0, arg1)
}
